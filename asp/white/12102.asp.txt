<%
If OT_ISOTCMS<>True Then
	response.write("非法访问")
	response.End()
End If


Const BASE_64_MAP_INIT ="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
Dim nl
Dim Base64EncMap(63)
Dim Base64DecMap(127)

' 使用前必须调用别的
Public Sub Base64_init()
	nl = "<P>" & Chr(13) & Chr(10)
	Dim max, idx
	max = Len(BASE_64_MAP_INIT)
	For idx = 0 To max - 1
		Base64EncMap(idx) = Mid(BASE_64_MAP_INIT, idx + 1, 1)
	Next
	For idx = 0 To max - 1
		Base64DecMap(ASC(Base64EncMap(idx))) = idx
	Next 
End Sub


' 加密
Public Function Base64_Encode(plain)
	If len(plain) = 0 Then
		Base64_Encode = ""
		Exit Function
	End If

	Dim ret, ndx, by3, first, second, third
	by3 = (len(plain) \ 3) * 3
	ndx = 1
	Do While ndx <= by3
		first	= Asc(Mid(plain, ndx+0, 1))
		second	= Asc(Mid(plain, ndx+1, 1))
		third	= Asc(Mid(plain, ndx+2, 1))
		ret = ret & Base64EncMap( (first \ 4) And 63 )
		ret = ret & Base64EncMap( ((first * 16) And 48) + ((second \ 16) And 15 ) )
		ret = ret & Base64EncMap( ((second * 4) And 60) + ((third \ 64) And 3 ) )
		ret = ret & Base64EncMap( third And 63)
		ndx = ndx + 3
	Loop

	If by3 < Len(plain) Then
		first = Asc(Mid(plain, ndx+0, 1))
		ret = ret & Base64EncMap( (first \ 4) And 63 )
		If (Len(plain) Mod 3 ) = 2 Then
			second = Asc(Mid(plain, ndx+1, 1))
			ret = ret & Base64EncMap( ((first * 16) And 48) +((second \ 16) And 15 ) )
			ret = ret & Base64EncMap( ((second * 4) And 60) )
		Else
			ret = ret & Base64EncMap( (first * 16) And 48)
			ret = ret & "="
		End If
		ret = ret & "="
	End If

	Base64_Encode = ret
End Function


' 解密
Public Function Base64_Decode(scrambled)
	If Len(scrambled) = 0 Then
		Base64_Decode = ""
		Exit Function
	End If

	Dim realLen
	realLen = Len(scrambled)
	Do While Mid(scrambled, realLen, 1) = "="
		realLen = realLen - 1
	Loop

	Dim ret, ndx, by4, first, second, third, fourth
	ret = ""
	by4 = (realLen \ 4) * 4
	ndx = 1
	Do While ndx <= by4
		first	= Base64DecMap(Asc(Mid(scrambled, ndx+0, 1)))
		second	= Base64DecMap(Asc(Mid(scrambled, ndx+1, 1)))
		third	= Base64DecMap(Asc(Mid(scrambled, ndx+2, 1)))
		fourth	= Base64DecMap(Asc(Mid(scrambled, ndx+3, 1)))
		ret = ret & Chr( ((first * 4) And 255) +   ((second \ 16) And 3))
		ret = ret & Chr( ((second * 16) And 255) + ((third \ 4) And 15) )
		ret = ret & Chr( ((third * 64) And 255) + (fourth And 63) )
		ndx = ndx + 4
	Loop

	If ndx < realLen Then
		first = Base64DecMap(Asc(Mid(scrambled, ndx+0, 1)))
		second = Base64DecMap(Asc(Mid(scrambled, ndx+1, 1)))
		ret = ret & Chr( ((first * 4) And 255) +   ((second \ 16) And 3))
		If realLen Mod 4 = 3 Then
			third = Base64DecMap(Asc(Mid(scrambled,ndx+2,1)))
			ret = ret & Chr( ((second * 16) And 255) + ((third \ 4) And 15) )
		End If
	End If

	Base64_Decode = ret
End Function


'Call Base64_init()

%>